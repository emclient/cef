// Copyright (c) 2016 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/spell_check_handler_cpptoc.h"


namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int CEF_CALLBACK spell_check_handler_is_word_misspelled(
    struct _cef_spell_check_handler_t* self, const cef_string_t* word) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return 0;
  // Verify param: word; type: string_byref_const
  DCHECK(word);
  if (!word)
    return 0;

  // Execute
  bool _retval = CefSpellCheckHandlerCppToC::Get(self)->IsWordMisspelled(
      CefString(word));

  // Return type: bool
  return _retval;
}

}  // namespace


// CONSTRUCTOR - Do not edit by hand.

CefSpellCheckHandlerCppToC::CefSpellCheckHandlerCppToC() {
  GetStruct()->is_word_misspelled = spell_check_handler_is_word_misspelled;
}

template<> CefRefPtr<CefSpellCheckHandler> CefCppToC<CefSpellCheckHandlerCppToC,
    CefSpellCheckHandler, cef_spell_check_handler_t>::UnwrapDerived(
    CefWrapperType type, cef_spell_check_handler_t* s) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#ifndef NDEBUG
template<> base::AtomicRefCount CefCppToC<CefSpellCheckHandlerCppToC,
    CefSpellCheckHandler, cef_spell_check_handler_t>::DebugObjCt = 0;
#endif

template<> CefWrapperType CefCppToC<CefSpellCheckHandlerCppToC,
    CefSpellCheckHandler, cef_spell_check_handler_t>::kWrapperType =
    WT_SPELL_CHECK_HANDLER;
