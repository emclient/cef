diff --git chrome/browser/resources/pdf/pdf_viewer.js chrome/browser/resources/pdf/pdf_viewer.js
index 942761c08a28..14fb22b02969 100644
--- chrome/browser/resources/pdf/pdf_viewer.js
+++ chrome/browser/resources/pdf/pdf_viewer.js
@@ -153,9 +153,11 @@ function PDFViewer(browserApi) {
   // Parse open pdf parameters.
   this.paramsParser_ = new OpenPDFParamsParser(
       message => this.pluginController_.postMessage(message));
+  var toolbarParam = this.paramsParser_.getUiUrlParams(this.originalUrl_).toolbar;
   const toolbarEnabled =
-      this.paramsParser_.getUiUrlParams(this.originalUrl_).toolbar &&
+      toolbarParam &&
       !this.isPrintPreview_;
+  var toolbarButtonsEnabled = toolbarParam;
 
   // The sizer element is placed behind the plugin element to cause scrollbars
   // to be displayed in the window. It is sized according to the document size
@@ -276,6 +278,12 @@ function PDFViewer(browserApi) {
     this.toolbar_.docTitle = getFilenameFromURL(this.originalUrl_);
   }
 
+  if (!toolbarButtonsEnabled) {
+  	this.zoomToolbar_.style.display = 'none';
+  	if (this.pageIndicator_)
+      this.pageIndicator_.style.display = 'none';
+  }
+
   document.body.addEventListener('change-page', e => {
     this.viewport_.goToPage(e.detail.page);
     if (e.detail.origin == 'bookmark') {
@@ -330,6 +338,7 @@ function PDFViewer(browserApi) {
       new ViewportScroller(this.viewport_, this.plugin_, window);
 
   // Request translated strings.
+  if (chrome.resourcesPrivate)
   chrome.resourcesPrivate.getStrings('pdf', this.handleStrings_.bind(this));
 
   // Listen for save commands from the browser.
@@ -915,7 +924,8 @@ PDFViewer.prototype = {
       pageY: visiblePageDimensions.y,
       pageWidth: visiblePageDimensions.width,
       viewportWidth: size.width,
-      viewportHeight: size.height
+      viewportHeight: size.height,
+      firstPage: visiblePage
     });
   },
 
@@ -953,6 +963,21 @@ PDFViewer.prototype = {
       case 'selectAll':
         this.pluginController_.postMessage(message.data);
         break;
+      case 'zoom':
+	  	if (message.data.zoom == 'fitToPage')
+	  		this.viewport_.fitToPage();
+	  	if (message.data.zoom == 'fitToWidth')
+	  		this.viewport_.fitToWidth();
+	  	else
+	  	{
+	  		var val = parseFloat(message.data.zoom);
+	  		if (!isNaN(val))
+	  			this.viewport_.setZoom(message.data.zoom);
+    }
+	  	break;
+	  case 'goToPage':
+	  	this.viewport_.goToPage(message.data.page);
+		break;
     }
   },
 
@@ -1046,7 +1071,7 @@ PDFViewer.prototype = {
       // leak important information.
       if (this.parentOrigin_ == window.location.origin) {
         targetOrigin = this.parentOrigin_;
-      } else if (message.type == 'documentLoaded') {
+      } else if (message.type == 'documentLoaded' || this.isPrintPreview_) {
         targetOrigin = '*';
       } else {
         targetOrigin = this.originalUrl_;
@@ -1591,6 +1616,10 @@ class PluginController extends ContentController {
         break;
       case 'documentDimensions':
         this.viewer_.setDocumentDimensions(message.data);
+        this.sendScriptingMessage_({
+      	  type: 'documentDimensionsChanged',
+          pageCount: this.documentDimensions_.pageDimensions.length
+        });
         break;
       case 'email':
         const href = 'mailto:' + message.data.to + '?cc=' + message.data.cc +
diff --git chrome/browser/resources/pdf/viewport.js chrome/browser/resources/pdf/viewport.js
index 02664b3fe333..8890c7e3b489 100644
--- chrome/browser/resources/pdf/viewport.js
+++ chrome/browser/resources/pdf/viewport.js
@@ -663,7 +663,7 @@ class ViewportImpl {
     let zoomHeight;
 
     if (fitWidth) {
-      zoomWidth = windowWidth / pageWidth;
+      zoomWidth = zoomWidth = (windowWidth - 1) / pageWidth;
     }
 
     if (fitHeight) {
