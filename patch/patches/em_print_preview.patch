diff --git chrome/browser/resources/pdf/controller.ts chrome/browser/resources/pdf/controller.ts
index b30eb710e0540..082568a749e67 100644
--- chrome/browser/resources/pdf/controller.ts
+++ chrome/browser/resources/pdf/controller.ts
@@ -464,6 +464,14 @@ export class PluginController implements ContentController {
     });
   }
 
+  insertStyle(id: string, style: string) {
+    this.postMessage_({
+      type: 'insertStyle',
+      id: id,
+      style: style
+    });
+  }
+
   save(requestType: SaveRequestType) {
     const resolver =
         new PromiseResolver<{fileName: string, dataToSave: ArrayBuffer}|null>();
diff --git chrome/browser/resources/pdf/pdf_internal_plugin_wrapper.ts chrome/browser/resources/pdf/pdf_internal_plugin_wrapper.ts
index 1b3f68d37c1ef..f4fb4088a3b7f 100644
--- chrome/browser/resources/pdf/pdf_internal_plugin_wrapper.ts
+++ chrome/browser/resources/pdf/pdf_internal_plugin_wrapper.ts
@@ -107,6 +107,19 @@ channel.port1.onmessage = e => {
         }
       }
       break;
+
+    case 'insertStyle':
+      var styleEl : HTMLStyleElement | null;
+      if (e.data.id && e.data.style) {
+        styleEl = document.querySelector("style[id='" + e.data.id + "']");
+        if (!styleEl) {
+          styleEl = document.createElement("style");
+          styleEl.id = e.data.id;
+          document.head.appendChild(styleEl);
+        }
+        styleEl.textContent = e.data.style;
+      }
+      return;
   }
 
   plugin.postMessage(e.data);
diff --git chrome/browser/resources/pdf/pdf_viewer.ts chrome/browser/resources/pdf/pdf_viewer.ts
index 0c87709097988..b823872e4f48a 100644
--- chrome/browser/resources/pdf/pdf_viewer.ts
+++ chrome/browser/resources/pdf/pdf_viewer.ts
@@ -92,6 +92,9 @@ enum PostMessageDataType {
   GET_SELECTED_TEXT = 0,
   PRINT = 1,
   SELECT_ALL = 2,
+  ZOOM = 3,
+  GO_TO_PAGE = 4,
+  INSERT_STYLE = 5,
 }
 
 interface EmailMessageData {
@@ -935,6 +938,33 @@ export class PdfViewerElement extends PdfViewerBaseElement {
         messageType = PostMessageDataType.SELECT_ALL;
         this.pluginController_.selectAll();
         break;
+      case 'zoom':
+        messageType = PostMessageDataType.ZOOM;
+        const zoomData = message.data.zoom.toString();
+        if (zoomData == 'fitToPage')
+          this.viewport.fitToPage();
+        else if (zoomData == 'fitToWidth')
+          this.viewport.fitToWidth();
+        else {
+          var zoomValue = parseFloat(zoomData);
+          if (!isNaN(zoomValue)) {
+            this.viewport.setZoom(zoomValue);
+          }
+        }
+        break;
+      case 'goToPage':
+        messageType = PostMessageDataType.GO_TO_PAGE;
+        var pageValue = parseInt(message.data.page.toString());
+        if (!isNaN(pageValue)) {
+          this.viewport.goToPage(pageValue);
+        }
+        break;
+      case 'insertStyle':
+        messageType = PostMessageDataType.INSERT_STYLE;
+        if (message.data.id && message.data.style) {
+          this.pluginController_.insertStyle(message.data.id, message.data.style);
+        }
+        break;
       default:
         return false;
     }
@@ -962,6 +992,10 @@ export class PdfViewerElement extends PdfViewerBaseElement {
         return;
       case 'documentDimensions':
         this.setDocumentDimensions(convertDocumentDimensionsMessage(data));
+        this.sendScriptingMessage({
+          type: 'documentDimensionsChanged',
+          pageCount: this.documentDimensions?.pageDimensions.length
+        });
         return;
       case 'documentFocusChanged':
         const hasFocusData = data as unknown as {hasFocus: boolean};
diff --git chrome/browser/resources/pdf/pdf_viewer_base.ts chrome/browser/resources/pdf/pdf_viewer_base.ts
index 10f5be7ef50af..fa50170ad7f9e 100644
--- chrome/browser/resources/pdf/pdf_viewer_base.ts
+++ chrome/browser/resources/pdf/pdf_viewer_base.ts
@@ -227,9 +227,11 @@ export abstract class PdfViewerBaseElement extends CrLitElement {
         (zoom: number) => this.zoomManager_!.onBrowserZoomChange(zoom));
 
     // Request translated strings.
-    chrome.resourcesPrivate.getStrings(
-        chrome.resourcesPrivate.Component.PDF,
-        strings => this.handleStrings(strings));
+    if (chrome.resourcesPrivate) {
+      chrome.resourcesPrivate.getStrings(
+          chrome.resourcesPrivate.Component.PDF,
+          strings => this.handleStrings(strings));
+    }
   }
 
   /**
@@ -303,6 +305,7 @@ export abstract class PdfViewerBaseElement extends CrLitElement {
       pageWidth: visiblePageDimensions.width,
       viewportWidth: size.width,
       viewportHeight: size.height,
+      firstPage: visiblePage
     });
   }
 
@@ -502,7 +505,8 @@ export abstract class PdfViewerBaseElement extends CrLitElement {
         targetOrigin = this.parentOrigin_;
       } else if (
           message.type === 'documentLoaded' ||
-          message.type === 'passwordPrompted') {
+          message.type === 'passwordPrompted' ||
+          this.parentOrigin_ === 'chrome://print') {
         targetOrigin = '*';
       } else {
         targetOrigin = this.originalUrl;
diff --git chrome/browser/resources/pdf/viewport.ts chrome/browser/resources/pdf/viewport.ts
index b2d496089211c..818548260cccf 100644
--- chrome/browser/resources/pdf/viewport.ts
+++ chrome/browser/resources/pdf/viewport.ts
@@ -1056,7 +1056,7 @@ export class Viewport {
     let zoomHeight: number|null = null;
 
     if (fitWidth) {
-      zoomWidth = windowWidth / pageWidth;
+      zoomWidth = (windowWidth - 1) / pageWidth;
     }
 
     if (fitHeight) {
diff --git tools/metrics/histograms/metadata/pdf/enums.xml tools/metrics/histograms/metadata/pdf/enums.xml
index 2c54adde30779..ab2c9368be13f 100644
--- tools/metrics/histograms/metadata/pdf/enums.xml
+++ tools/metrics/histograms/metadata/pdf/enums.xml
@@ -257,6 +257,9 @@ chromium-metrics-reviews@google.com.
   <int value="0" label="getSelectedText"/>
   <int value="1" label="print"/>
   <int value="2" label="selectAll"/>
+  <int value="3" label="zoom"/>
+  <int value="4" label="goToPage"/>
+  <int value="5" label="insertStyle"/>
 </enum>
 
 <enum name="PDFVersion">
