diff --git chrome/browser/printing/print_view_manager_base.cc chrome/browser/printing/print_view_manager_base.cc
index 57d09902647c4..40accec64d193 100644
--- chrome/browser/printing/print_view_manager_base.cc
+++ chrome/browser/printing/print_view_manager_base.cc
@@ -185,12 +185,16 @@ PrintViewManagerBase::~PrintViewManagerBase() {
   DisconnectFromCurrentPrintJob();
 }
 
-bool PrintViewManagerBase::PrintNow(content::RenderFrameHost* rfh) {
+bool PrintViewManagerBase::PrintNow(content::RenderFrameHost* rfh,
+                                    base::Value::Dict settings,
+                                    CompletionCallback callback) {
   if (!StartPrintCommon(rfh)) {
     return false;
   }
 
-  GetPrintRenderFrame(rfh)->PrintRequestedPages();
+  callback_ = std::move(callback);
+
+  GetPrintRenderFrame(rfh)->PrintRequestedPages(std::move(settings));
 
   for (auto& observer : GetTestObservers()) {
     observer.OnPrintNow(rfh);
@@ -319,31 +323,38 @@ void PrintViewManagerBase::OnDidUpdatePrintableArea(
   }
   PRINTER_LOG(EVENT) << "Paper printable area updated for vendor id "
                      << print_settings->requested_media().vendor_id;
-  CompleteUpdatePrintSettings(std::move(job_settings),
+  CompleteUpdatePrintSettings(nullptr /* printer_query */, std::move(job_settings),
                               std::move(print_settings), std::move(callback));
 }
 #endif
 
 void PrintViewManagerBase::CompleteUpdatePrintSettings(
+    std::unique_ptr<PrinterQuery> printer_query,
     base::Value::Dict job_settings,
     std::unique_ptr<PrintSettings> print_settings,
     UpdatePrintSettingsCallback callback) {
   mojom::PrintPagesParamsPtr settings = mojom::PrintPagesParams::New();
   settings->pages = GetPageRangesFromJobSettings(job_settings);
   settings->params = mojom::PrintParams::New();
-  RenderParamsFromPrintSettings(*print_settings, settings->params.get());
-  settings->params->document_cookie = PrintSettings::NewCookie();
+  auto current_print_settings = printer_query ? printer_query->settings() : *print_settings;
+  RenderParamsFromPrintSettings(current_print_settings, settings->params.get());
+  settings->params->document_cookie = printer_query ? printer_query->cookie()
+                                                    : PrintSettings::NewCookie();
   if (!PrintMsgPrintParamsIsValid(*settings->params)) {
     mojom::PrinterType printer_type = static_cast<mojom::PrinterType>(
         *job_settings.FindInt(kSettingPrinterType));
     PRINTER_LOG(ERROR) << "Printer settings invalid for "
-                       << base::UTF16ToUTF8(print_settings->device_name())
+                       << base::UTF16ToUTF8(current_print_settings.device_name())
                        << " (destination type " << printer_type << "): "
                        << PrintMsgPrintParamsErrorDetails(*settings->params);
     std::move(callback).Run(nullptr);
     return;
   }
 
+  if (printer_query && printer_query->cookie() && printer_query->settings().dpi()) {
+    queue_->QueuePrinterQuery(std::move(printer_query));
+  }
+
   set_cookie(settings->params->document_cookie);
   std::move(callback).Run(std::move(settings));
 }
@@ -696,8 +707,14 @@ void PrintViewManagerBase::UpdatePrintSettings(
   std::optional<int> printer_type_value =
       job_settings.FindInt(kSettingPrinterType);
   if (!printer_type_value) {
-    std::move(callback).Run(nullptr);
-    return;
+    const std::string* device_name = job_settings.FindString(kSettingDeviceName);
+    if (device_name != nullptr) {
+      printer_type_value = (int)mojom::PrinterType::kLocal;
+      job_settings.Set(kSettingPrinterType, (int)mojom::PrinterType::kLocal);
+    } else {
+      std::move(callback).Run(nullptr);
+      return;
+    }
   }
 
   mojom::PrinterType printer_type =
@@ -725,8 +742,16 @@ void PrintViewManagerBase::UpdatePrintSettings(
   std::unique_ptr<PrintSettings> print_settings =
       PrintSettingsFromJobSettings(job_settings);
   if (!print_settings) {
-    std::move(callback).Run(nullptr);
-    return;
+    if (!job_settings.empty()) {
+      // Assume the input were partial settings and instruct PrintingContext
+      // (through PrinterQuery) to start off with the default values and then
+      // augment them with overrides from the job_settings dictionary.
+      print_settings = std::make_unique<PrintSettings>();
+      job_settings.Set("useDefaults", true);
+    } else {
+      std::move(callback).Run(nullptr);
+      return;
+    }
   }
 
   bool open_in_external_preview =
@@ -740,30 +765,19 @@ void PrintViewManagerBase::UpdatePrintSettings(
     }
   }
 
-#if BUILDFLAG(IS_WIN)
-  // TODO(crbug.com/40260379):  Remove this if the printable areas can be made
-  // fully available from `PrintBackend::GetPrinterSemanticCapsAndDefaults()`
-  // for in-browser queries.
-  if (printer_type == mojom::PrinterType::kLocal) {
-    // Without a document cookie to find a previous query, must generate a
-    // fresh printer query each time, even if the paper size didn't change.
-    std::unique_ptr<PrinterQuery> printer_query =
-        queue()->CreatePrinterQuery(GetCurrentTargetFrame()->GetGlobalId());
-
-    auto* printer_query_ptr = printer_query.get();
-    auto* print_settings_ptr = print_settings.get();
-    printer_query_ptr->UpdatePrintableArea(
-        print_settings_ptr,
-        base::BindOnce(&PrintViewManagerBase::OnDidUpdatePrintableArea,
-                       weak_ptr_factory_.GetWeakPtr(), std::move(printer_query),
-                       std::move(job_settings), std::move(print_settings),
-                       std::move(callback)));
-    return;
-  }
-#endif
-
-  CompleteUpdatePrintSettings(std::move(job_settings),
-                              std::move(print_settings), std::move(callback));
+  std::unique_ptr<PrinterQuery> query =
+      queue_->CreatePrinterQuery(GetCurrentTargetFrame()->GetGlobalId());
+  auto* query_ptr = query.get();
+  // We need to clone this before calling SetSettings because some environments
+  // evaluate job_settings.Clone() first, and some std::move(job_settings) first,
+  // for the former things work correctly but for the latter the cloned value is null.
+  auto job_settings_copy = job_settings.Clone();
+  query_ptr->SetSettings(
+      std::move(job_settings_copy),
+      base::BindOnce(&PrintViewManagerBase::CompleteUpdatePrintSettings,
+                     weak_ptr_factory_.GetWeakPtr(), std::move(query),
+                     std::move(job_settings), std::move(print_settings),
+                     std::move(callback)));
 }
 
 void PrintViewManagerBase::SetAccessibilityTree(
@@ -884,6 +898,10 @@ void PrintViewManagerBase::RenderFrameDeleted(
   }
 #endif
 
+  if (!callback_.is_null()) {
+    std::move(callback_).Run(printing_succeeded_);
+  }
+
   if (!print_job_)
     return;
 
@@ -995,7 +1013,10 @@ bool PrintViewManagerBase::SetupNewPrintJob(
 
   // Disconnect the current `print_job_`.
   auto weak_this = weak_ptr_factory_.GetWeakPtr();
-  DisconnectFromCurrentPrintJob();
+  if (callback_.is_null()) {
+    // Disconnect the current |print_job_| only when calling window.print()
+    DisconnectFromCurrentPrintJob();
+  }
   if (!weak_this)
     return false;
 
@@ -1083,6 +1104,10 @@ void PrintViewManagerBase::ReleasePrintJob() {
   }
 #endif
 
+  if (!callback_.is_null()) {
+    std::move(callback_).Run(printing_succeeded_);
+  }
+
   if (!print_job_)
     return;
 
@@ -1132,7 +1157,7 @@ bool PrintViewManagerBase::RunInnerMessageLoop() {
 }
 
 bool PrintViewManagerBase::OpportunisticallyCreatePrintJob(int cookie) {
-  if (print_job_)
+  if (print_job_ && print_job_->document())
     return true;
 
   if (!cookie) {
diff --git chrome/browser/printing/print_view_manager_base.h chrome/browser/printing/print_view_manager_base.h
index 824d6d8a92423..5c40132a80abd 100644
--- chrome/browser/printing/print_view_manager_base.h
+++ chrome/browser/printing/print_view_manager_base.h
@@ -46,6 +46,8 @@ namespace printing {
 class PrintQueriesQueue;
 class PrinterQuery;
 
+using CompletionCallback = base::OnceCallback<void(bool)>;
+
 // Base class for managing the print commands for a WebContents.
 class PrintViewManagerBase : public PrintManager, public PrintJob::Observer {
  public:
@@ -76,7 +78,9 @@ class PrintViewManagerBase : public PrintManager, public PrintJob::Observer {
   // Prints the current document immediately. Since the rendering is
   // asynchronous, the actual printing will not be completed on the return of
   // this function. Returns false if printing is impossible at the moment.
-  virtual bool PrintNow(content::RenderFrameHost* rfh);
+  virtual bool PrintNow(content::RenderFrameHost* rfh,
+                        base::Value::Dict settings = {},
+                        CompletionCallback callback = {});
 
   // Like PrintNow(), but for the node under the context menu, instead of the
   // entire frame.
@@ -282,6 +286,7 @@ class PrintViewManagerBase : public PrintManager, public PrintJob::Observer {
                                 bool success);
 #endif
   void CompleteUpdatePrintSettings(
+      std::unique_ptr<PrinterQuery> printer_query,
       base::Value::Dict job_settings,
       std::unique_ptr<PrintSettings> print_settings,
       UpdatePrintSettingsCallback callback);
@@ -376,6 +381,9 @@ class PrintViewManagerBase : public PrintManager, public PrintJob::Observer {
   // The current RFH that is printing with a system printing dialog.
   raw_ptr<content::RenderFrameHost> printing_rfh_ = nullptr;
 
+  // Respond with success of the print job.
+  CompletionCallback callback_;
+
   // Indication of success of the print job.
   bool printing_succeeded_ = false;
 
diff --git chrome/browser/printing/print_view_manager_common.cc chrome/browser/printing/print_view_manager_common.cc
index 7e468e01a9f81..38490211144e1 100644
--- chrome/browser/printing/print_view_manager_common.cc
+++ chrome/browser/printing/print_view_manager_common.cc
@@ -29,8 +29,6 @@
 
 namespace printing {
 
-namespace {
-
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 using PrintViewManagerImpl = PrintViewManager;
 #else
@@ -57,8 +55,6 @@ content::RenderFrameHost* GetRenderFrameHostToUse(
   return GetFrameToPrint(contents);
 }
 
-}  // namespace
-
 bool StartPrint(
     content::WebContents* contents,
 #if BUILDFLAG(IS_CHROMEOS)
diff --git chrome/browser/printing/print_view_manager_common.h chrome/browser/printing/print_view_manager_common.h
index 1d58353e3c893..9983a3bfba8d0 100644
--- chrome/browser/printing/print_view_manager_common.h
+++ chrome/browser/printing/print_view_manager_common.h
@@ -36,6 +36,8 @@ void StartBasicPrint(content::WebContents* contents);
 void StartPrintNodeUnderContextMenu(content::RenderFrameHost* rfh,
                                     bool print_preview_disabled);
 
+content::RenderFrameHost* GetRenderFrameHostToUse(content::WebContents* contents);
+
 // If the user has selected text in the currently focused frame, print only that
 // frame (this makes print selection work for multiple frames).
 content::RenderFrameHost* GetFrameToPrint(content::WebContents* contents);
diff --git components/printing/common/print.mojom components/printing/common/print.mojom
index ac2f719be5660..9a10b2f2f49d1 100644
--- components/printing/common/print.mojom
+++ components/printing/common/print.mojom
@@ -299,7 +299,7 @@ enum PrintFailureReason {
 interface PrintRenderFrame {
   // Tells the RenderFrame to switch the CSS to print media type, render every
   // requested page, and then switch back the CSS to display media type.
-  PrintRequestedPages();
+  PrintRequestedPages(mojo_base.mojom.DictionaryValue job_settings);
 
   // Requests the frame to be printed with specified parameters. This is used
   // to programmatically produce PDF by request from the browser (e.g. over
diff --git components/printing/renderer/print_render_frame_helper.cc components/printing/renderer/print_render_frame_helper.cc
index cb0f05dc6f6e1..f0644a2a6e25d 100644
--- components/printing/renderer/print_render_frame_helper.cc
+++ components/printing/renderer/print_render_frame_helper.cc
@@ -1247,7 +1247,8 @@ void PrintRenderFrameHelper::ScriptedPrint(bool user_initiated) {
     return;
   }
 
-  Print(web_frame, blink::WebNode(), PrintRequestType::kScripted);
+  Print(web_frame, blink::WebNode(), PrintRequestType::kScripted,
+        base::Value::Dict());
   if (!weak_this) {
     return;
   }
@@ -1278,12 +1279,14 @@ void PrintRenderFrameHelper::BindPrintRenderFrameReceiver(
   receivers_.Add(this, std::move(receiver));
 }
 
-void PrintRenderFrameHelper::PrintRequestedPages() {
-  PrintRequestedPagesInternal(/*already_notified_frame=*/false);
+void PrintRenderFrameHelper::PrintRequestedPages(base::Value::Dict job_settings) {
+  PrintRequestedPagesInternal(/*already_notified_frame=*/false,
+                              std::move(job_settings));
 }
 
 void PrintRenderFrameHelper::PrintRequestedPagesInternal(
-    bool already_notified_frame) {
+    bool already_notified_frame,
+    base::Value::Dict job_settings) {
   ScopedIPC scoped_ipc(weak_ptr_factory_.GetWeakPtr());
   if (ipc_nesting_level_ > kAllowedIpcDepthForPrint) {
     return;
@@ -1302,7 +1305,8 @@ void PrintRenderFrameHelper::PrintRequestedPagesInternal(
     if (is_loading_) {
       on_stop_loading_closure_ = base::BindOnce(
           &PrintRenderFrameHelper::PrintRequestedPagesInternal,
-          weak_ptr_factory_.GetWeakPtr(), /*already_notified_frame=*/true);
+          weak_ptr_factory_.GetWeakPtr(), /*already_notified_frame=*/true,
+          std::move(job_settings));
       SetupOnStopLoadingTimeout();
       return;
     }
@@ -1312,7 +1316,7 @@ void PrintRenderFrameHelper::PrintRequestedPagesInternal(
   // plugin node and print that instead.
   auto plugin = delegate_->GetPdfElement(frame);
 
-  Print(frame, plugin, PrintRequestType::kRegular);
+  Print(frame, plugin, PrintRequestType::kRegular, std::move(job_settings));
 
   if (render_frame_gone_) {
     return;
@@ -1367,8 +1371,16 @@ void PrintRenderFrameHelper::PrintWithParams(
   SetPrintPagesParams(*settings);
   prep_frame_view_ =
       std::make_unique<PrepareFrameAndViewForPrint>(frame, plugin_node);
-  prep_frame_view_->EnterPrintMode(*settings->params,
-                                   /*ignore_css_margins=*/false);
+  prep_frame_view_->BeginPrinting(
+      render_frame()->GetBlinkPreferences(), *settings->params, /*ignore_css_margins=*/false,
+      base::BindOnce(&PrintRenderFrameHelper::OnFramePreparedForPrintWithParams,
+                     weak_ptr_factory_.GetWeakPtr()));
+}
+
+void PrintRenderFrameHelper::OnFramePreparedForPrintWithParams() {
+  if (render_frame_gone_) {
+    return;
+  }
 
   PrintPages();
   FinishFramePrinting();
@@ -1377,6 +1389,7 @@ void PrintRenderFrameHelper::PrintWithParams(
     return;
   }
 
+  blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
   frame->DispatchAfterPrintEvent();
   // WARNING: `this` may be gone at this point. Do not do any more work here and
   // just return.
@@ -1468,6 +1481,8 @@ void PrintRenderFrameHelper::PrintPreview(base::Value::Dict settings) {
   if (ipc_nesting_level_ > kAllowedIpcDepthForPrint)
     return;
 
+  blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
+  print_preview_context_.InitWithFrame(frame);
   print_preview_context_.OnPrintPreview();
 
 #if BUILDFLAG(IS_CHROMEOS)
@@ -2080,14 +2095,22 @@ void PrintRenderFrameHelper::PrintNode(const blink::WebNode& node) {
 
 void PrintRenderFrameHelper::Print(blink::WebLocalFrame* frame,
                                    const blink::WebNode& node,
-                                   PrintRequestType print_request_type) {
+                                   PrintRequestType print_request_type,
+                                   base::Value::Dict job_settings) {
   // If still not finished with earlier print request simply ignore.
   if (prep_frame_view_)
     return;
 
+  bool silent = job_settings.FindBool("silent").value_or(false);
   FrameReference frame_ref(frame);
 
-  if (!InitPrintSettings(frame, node)) {
+  // If we're silently printing a PDF, we bypass settings logic
+  // that sets modifiability to false so ensure it's set here.
+  if (silent && IsPrintingPdfFrame(frame, node)) {
+    job_settings.Set(kSettingPreviewModifiable, false);
+  }
+
+  if (!InitPrintSettings(frame, node, std::move(job_settings))) {
     // Browser triggered this code path. It already knows about the failure.
     notify_browser_of_print_failure_ = false;
 
@@ -2111,8 +2134,15 @@ void PrintRenderFrameHelper::Print(blink::WebLocalFrame* frame,
         print_pages_params_->params->print_scaling_option;
 
     auto self = weak_ptr_factory_.GetWeakPtr();
-    mojom::PrintPagesParamsPtr print_settings = GetPrintSettingsFromUser(
-        frame_ref.GetFrame(), node, expected_page_count, print_request_type);
+    mojom::PrintPagesParamsPtr print_settings;
+
+    if (silent) {
+      print_settings = mojom::PrintPagesParams::New();
+      print_settings->params = print_pages_params_->params->Clone();
+    } else {
+      print_settings = GetPrintSettingsFromUser(
+          frame_ref.GetFrame(), node, expected_page_count, print_request_type);
+    }
     // Check if `this` is still valid.
     if (!self)
       return;
@@ -2379,29 +2409,42 @@ void PrintRenderFrameHelper::IPCProcessed() {
 }
 
 bool PrintRenderFrameHelper::InitPrintSettings(blink::WebLocalFrame* frame,
-                                               const blink::WebNode& node) {
+                                               const blink::WebNode& node,
+                                               base::Value::Dict job_settings) {
   // Reset to default values.
   ignore_css_margins_ = false;
 
-  mojom::PrintPagesParams settings;
-  GetPrintManagerHost()->GetDefaultPrintSettings(&settings.params);
+  mojom::PrintPagesParamsPtr settings;
+  if (job_settings.empty()) {
+    settings = mojom::PrintPagesParams::New();
+    settings->params = mojom::PrintParams::New();
+    GetPrintManagerHost()->GetDefaultPrintSettings(&settings->params);
+  } else {
+    GetPrintManagerHost()->UpdatePrintSettings(
+      std::move(job_settings), &settings);
+  }
 
   // Check if the printer returned any settings, if the settings are null,
   // assume there are no printer drivers configured. So safely terminate.
-  if (!settings.params) {
+  if (!settings || !settings->params) {
     // Caller will reset `print_pages_params_`.
     return false;
   }
 
   bool center_on_paper = !IsPrintingPdfFrame(frame, node);
-  settings.params->print_scaling_option =
-      center_on_paper ? mojom::PrintScalingOption::kCenterShrinkToFitPaper
-                      : mojom::PrintScalingOption::kSourceSize;
-  RecordDebugEvent(settings.params->printed_doc_type ==
+  bool silent = job_settings.FindBool("silent").value_or(false);
+  if (silent) {
+    settings->params->print_scaling_option = mojom::PrintScalingOption::kFitToPrintableArea;
+  } else {
+    settings->params->print_scaling_option =
+        center_on_paper ? mojom::PrintScalingOption::kCenterShrinkToFitPaper
+                        : mojom::PrintScalingOption::kSourceSize;
+  }
+  RecordDebugEvent(settings->params->printed_doc_type ==
                            mojom::SkiaDocumentType::kMSKP
                        ? DebugEvent::kSetPrintSettings5
                        : DebugEvent::kSetPrintSettings6);
-  SetPrintPagesParams(settings);
+  SetPrintPagesParams(*settings);
   return true;
 }
 
diff --git components/printing/renderer/print_render_frame_helper.h components/printing/renderer/print_render_frame_helper.h
index 97cb6458bc9ee..abf25820e5bfd 100644
--- components/printing/renderer/print_render_frame_helper.h
+++ components/printing/renderer/print_render_frame_helper.h
@@ -258,9 +258,10 @@ class PrintRenderFrameHelper
       mojo::PendingAssociatedReceiver<mojom::PrintRenderFrame> receiver);
 
   // printing::mojom::PrintRenderFrame:
-  void PrintRequestedPages() override;
+  void PrintRequestedPages(base::Value::Dict job_settings) override;
   void PrintWithParams(mojom::PrintPagesParamsPtr params,
                        PrintWithParamsCallback callback) override;
+  void OnFramePreparedForPrintWithParams();
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
   void PrintForSystemDialog() override;
   void SetPrintPreviewUI(
@@ -325,7 +326,8 @@ class PrintRenderFrameHelper
   // WARNING: |this| may be gone after this method returns.
   void Print(blink::WebLocalFrame* frame,
              const blink::WebNode& node,
-             PrintRequestType print_request_type);
+             PrintRequestType print_request_type,
+             base::Value::Dict job_settings = {});
 
   // Notification when printing is done - signal tear-down/free resources.
   void DidFinishPrinting(PrintingResult result);
@@ -335,7 +337,8 @@ class PrintRenderFrameHelper
   // Initialize print page settings with default settings.
   // Used only for native printing workflow.
   bool InitPrintSettings(blink::WebLocalFrame* frame,
-                         const blink::WebNode& node);
+                         const blink::WebNode& node,
+                         base::Value::Dict job_settings);
 
   // Calculate number of pages in source document.
   uint32_t CalculateNumberOfPages(blink::WebLocalFrame* frame,
@@ -637,7 +640,8 @@ class PrintRenderFrameHelper
   };
 
   void SetupOnStopLoadingTimeout();
-  void PrintRequestedPagesInternal(bool already_notified_frame);
+  void PrintRequestedPagesInternal(bool already_notified_frame,
+                                   base::Value::Dict job_settings);
 
   ScriptingThrottler scripting_throttler_;
 
diff --git printing/printing_context.cc printing/printing_context.cc
index 746a056e1c798..b0141be789e70 100644
--- printing/printing_context.cc
+++ printing/printing_context.cc
@@ -9,6 +9,7 @@
 #include "base/check_op.h"
 #include "base/debug/crash_logging.h"
 #include "base/json/json_writer.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/notreached.h"
 #include "build/build_config.h"
 #include "printing/buildflags/buildflags.h"
@@ -157,20 +158,58 @@ void PrintingContext::UsePdfSettings() {
 
 mojom::ResultCode PrintingContext::UpdatePrintSettings(
     base::Value::Dict job_settings) {
-  ResetSettings();
-  {
-    std::unique_ptr<PrintSettings> settings =
-        PrintSettingsFromJobSettings(job_settings);
-    if (!settings) {
-      // TODO(crbug.com/40897743): Investigate and remove.
-      std::optional<std::string> job_settings_json =
-          base::WriteJson(job_settings);
-      SCOPED_CRASH_KEY_STRING1024("PrintingContext", "job_settings_json",
-                                  job_settings_json.value_or("nullopt"));
-      DUMP_WILL_BE_NOTREACHED();
-      return OnError();
+  if (job_settings.FindBool("useDefaults").value_or(false)) {
+    auto result = UseDefaultSettings();
+    if (result != mojom::ResultCode::kSuccess) {
+      return result;
+    }
+
+    std::optional<bool> collate = job_settings.FindBool(kSettingCollate);
+    std::optional<int> copies = job_settings.FindInt(kSettingCopies);
+    std::optional<int> color = job_settings.FindInt(kSettingColor);
+    std::optional<int> duplex_mode = job_settings.FindInt(kSettingDuplexMode);
+    const std::string* device_name = job_settings.FindString(kSettingDeviceName);
+    std::optional<bool> is_modifiable = job_settings.FindBool(kSettingPreviewModifiable);
+
+    if (copies.has_value()) {
+      settings_->set_copies(copies.value());
+      if (collate.has_value()) {
+        settings_->set_collate(collate.value());
+      }
+    }
+
+    if (!device_name->empty()) {
+      settings_->set_device_name(base::UTF8ToUTF16(*device_name));
+    }
+
+    if (duplex_mode.has_value()) {
+      settings_->set_duplex_mode(
+        static_cast<mojom::DuplexMode>(duplex_mode.value()));
+    }
+
+    if (color.has_value()) {
+      settings_->set_color(static_cast<mojom::ColorModel>(color.value()));
+    }
+
+    if (is_modifiable.has_value()) {
+      settings_->set_is_modifiable(is_modifiable.value());
+    }
+  } else {
+    ResetSettings();
+    {
+      std::unique_ptr<PrintSettings> settings =
+          PrintSettingsFromJobSettings(job_settings);
+      if (!settings) {
+        // TODO(crbug.com/40897743): Investigate and remove.
+        std::optional<std::string> job_settings_json =
+            base::WriteJson(job_settings);
+        SCOPED_CRASH_KEY_STRING1024("PrintingContext", "job_settings_json",
+                                    job_settings_json.value_or("nullopt"));
+        DUMP_WILL_BE_NOTREACHED();
+        return OnError();
+      }
+      settings_ = std::move(settings);
     }
-    settings_ = std::move(settings);
   }
 
   mojom::PrinterType printer_type = static_cast<mojom::PrinterType>(
