 chrome/browser/printing/print_job_worker.cc        | 18 ++++-
 chrome/browser/printing/print_job_worker.h         |  7 +-
 chrome/browser/printing/printer_query.cc           | 21 +++++-
 chrome/browser/printing/printer_query.h            | 15 ++++
 components/printing/common/print_messages.h        |  7 ++
 .../printing/renderer/print_web_view_helper.cc     | 85 ++++++++++++++++++++--
 .../printing/renderer/print_web_view_helper.h      | 20 ++++-
 printing/printing_context.h                        |  3 +
 printing/printing_context_win.cc                   | 34 +++++++++
 printing/printing_context_win.h                    |  1 +
 10 files changed, 194 insertions(+), 17 deletions(-)

diff --git chrome/browser/printing/print_job_worker.cc chrome/browser/printing/print_job_worker.cc
index e7cdf14..8b27452 100644
--- chrome/browser/printing/print_job_worker.cc
+++ chrome/browser/printing/print_job_worker.cc
@@ -137,7 +137,9 @@ void PrintJobWorker::GetSettings(
     int document_page_count,
     bool has_selection,
     MarginType margin_type,
-    bool is_scripted) {
+    bool is_scripted,
+	const base::string16& forced_printer,
+	const PageRanges& forced_pages) {
   DCHECK(task_runner_->RunsTasksOnCurrentThread());
   DCHECK_EQ(page_number_, PageNumber::npos());
 
@@ -165,7 +167,9 @@ void PrintJobWorker::GetSettings(
         BrowserThread::UI, FROM_HERE,
         base::Bind(&HoldRefCallback, make_scoped_refptr(owner_),
                    base::Bind(&PrintJobWorker::UseDefaultSettings,
-                              base::Unretained(this))));
+                              base::Unretained(this),
+					          forced_printer,
+					          forced_pages)));
   }
 }
 
@@ -240,8 +244,14 @@ void PrintJobWorker::GetSettingsWithUI(
                             weak_factory_.GetWeakPtr())));
 }
 
-void PrintJobWorker::UseDefaultSettings() {
-  PrintingContext::Result result = printing_context_->UseDefaultSettings();
+void PrintJobWorker::UseDefaultSettings(
+	const base::string16& forced_printer,
+	const printing::PageRanges& forced_pages) {
+	PrintingContext::Result result;
+  if (forced_printer.empty())
+    result = printing_context_->UseDefaultSettings();
+  else
+    result = printing_context_->UseDefaultSettingsWithPrinterAndRanges(forced_printer, forced_pages);
   GetSettingsDone(result);
 }
 
diff --git chrome/browser/printing/print_job_worker.h chrome/browser/printing/print_job_worker.h
index 83d8b35..1cc3ada 100644
--- chrome/browser/printing/print_job_worker.h
+++ chrome/browser/printing/print_job_worker.h
@@ -49,7 +49,9 @@ class PrintJobWorker {
       int document_page_count,
       bool has_selection,
       MarginType margin_type,
-      bool is_scripted);
+      bool is_scripted,
+	  const base::string16& forced_printer,
+	  const PageRanges& forced_pages);
 
   // Set the new print settings.
   void SetSettings(scoped_ptr<base::DictionaryValue> new_settings);
@@ -124,7 +126,8 @@ class PrintJobWorker {
   // Use the default settings. When using GTK+ or Mac, this can still end up
   // displaying a dialog. So this needs to happen from the UI thread on these
   // systems.
-  void UseDefaultSettings();
+  void UseDefaultSettings(const base::string16& forced_printer,
+	  const PageRanges& forced_pages);
 
   // Printing context delegate.
   scoped_ptr<PrintingContext::Delegate> printing_context_delegate_;
diff --git chrome/browser/printing/printer_query.cc chrome/browser/printing/printer_query.cc
index 014b5c1..2847db1 100644
--- chrome/browser/printing/printer_query.cc
+++ chrome/browser/printing/printer_query.cc
@@ -64,12 +64,24 @@ int PrinterQuery::cookie() const {
 }
 
 void PrinterQuery::GetSettings(
+	GetSettingsAskParam ask_user_for_settings,
+	int expected_page_count,
+	bool has_selection,
+	MarginType margin_type,
+	bool is_scripted,
+	const base::Closure& callback) {
+	GetSettings(ask_user_for_settings, expected_page_count, has_selection, margin_type, is_scripted, callback, L"", PageRanges());
+}
+
+void PrinterQuery::GetSettings(
     GetSettingsAskParam ask_user_for_settings,
     int expected_page_count,
     bool has_selection,
     MarginType margin_type,
     bool is_scripted,
-    const base::Closure& callback) {
+    const base::Closure& callback,
+	const base::string16& forced_printer,
+	const PageRanges& forced_pages) {
   DCHECK(RunsTasksOnCurrentThread());
   DCHECK(!is_print_dialog_box_shown_ || !is_scripted);
 
@@ -77,15 +89,16 @@ void PrinterQuery::GetSettings(
 
   // Real work is done in PrintJobWorker::GetSettings().
   is_print_dialog_box_shown_ =
-      ask_user_for_settings == GetSettingsAskParam::ASK_USER;
-  worker_->PostTask(FROM_HERE,
+      ask_user_for_settings == GetSettingsAskParam::ASK_USER;worker_->PostTask(FROM_HERE,
                     base::Bind(&PrintJobWorker::GetSettings,
                                base::Unretained(worker_.get()),
                                is_print_dialog_box_shown_,
                                expected_page_count,
                                has_selection,
                                margin_type,
-                               is_scripted));
+                               is_scripted,
+						       forced_printer,
+						       forced_pages));
 }
 
 void PrinterQuery::SetSettings(scoped_ptr<base::DictionaryValue> new_settings,
diff --git chrome/browser/printing/printer_query.h chrome/browser/printing/printer_query.h
index 0a24336..a8055566 100644
--- chrome/browser/printing/printer_query.h
+++ chrome/browser/printing/printer_query.h
@@ -28,6 +28,7 @@ class PrinterQuery : public PrintJobWorkerOwner {
   enum class GetSettingsAskParam {
     DEFAULTS,
     ASK_USER,
+	DEFAULTS_WITH_FORCED_PRINTER
   };
 
   PrinterQuery(int render_process_id, int render_view_id);
@@ -51,6 +52,20 @@ class PrinterQuery : public PrintJobWorkerOwner {
       bool is_scripted,
       const base::Closure& callback);
 
+  // Initializes the printing context. It is fine to call this function multiple
+  // times to reinitialize the settings. |web_contents_observer| can be queried
+  // to find the owner of the print setting dialog box. It is unused when
+  // |ask_for_user_settings| is DEFAULTS.
+  void GetSettings(
+	  GetSettingsAskParam ask_user_for_settings,
+	  int expected_page_count,
+	  bool has_selection,
+	  MarginType margin_type,
+	  bool is_scripted,
+	  const base::Closure& callback,
+	  const base::string16& forced_printer,
+	  const PageRanges& forced_pages);
+
   // Updates the current settings with |new_settings| dictionary values.
   void SetSettings(scoped_ptr<base::DictionaryValue> new_settings,
                    const base::Closure& callback);
diff --git components/printing/common/print_messages.h components/printing/common/print_messages.h
index a07eb32..eb7284b 100644
--- components/printing/common/print_messages.h
+++ components/printing/common/print_messages.h
@@ -308,6 +308,8 @@ IPC_STRUCT_BEGIN(PrintHostMsg_ScriptedPrint_Params)
   IPC_STRUCT_MEMBER(bool, has_selection)
   IPC_STRUCT_MEMBER(bool, is_scripted)
   IPC_STRUCT_MEMBER(printing::MarginType, margin_type)
+  IPC_STRUCT_MEMBER(base::string16, forced_printer)
+  IPC_STRUCT_MEMBER(printing::PageRanges, pages)
 IPC_STRUCT_END()
 
 
@@ -333,6 +335,11 @@ IPC_MESSAGE_ROUTED1(PrintMsg_PrintForPrintPreview,
 // requested pages and switch back the CSS to display media type.
 IPC_MESSAGE_ROUTED0(PrintMsg_PrintPages)
 
+// Tells the render view to switch the CSS to print media type, renders every
+// requested pages and switch back the CSS to display media type.
+IPC_MESSAGE_ROUTED2(PrintMsg_PrintPagesWithSettings, base::string16, printing::PageRanges)
+
+
 // Like PrintMsg_PrintPages, but using the print preview document's frame/node.
 IPC_MESSAGE_ROUTED0(PrintMsg_PrintForSystemDialog)
 #endif  // defined(ENABLE_BASIC_PRINTING)
diff --git components/printing/renderer/print_web_view_helper.cc components/printing/renderer/print_web_view_helper.cc
index fcad8b2..353fef1 100644
--- components/printing/renderer/print_web_view_helper.cc
+++ components/printing/renderer/print_web_view_helper.cc
@@ -907,6 +907,7 @@ bool PrintWebViewHelper::OnMessageReceived(const IPC::Message& message) {
   IPC_BEGIN_MESSAGE_MAP(PrintWebViewHelper, message)
 #if defined(ENABLE_BASIC_PRINTING)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintPages, OnPrintPages)
+    IPC_MESSAGE_HANDLER(PrintMsg_PrintPagesWithSettings, OnPrintPagesWithSettings)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintForSystemDialog, OnPrintForSystemDialog)
 #endif  // defined(ENABLE_BASIC_PRINTING)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintForPrintPreview, OnPrintForPrintPreview)
@@ -952,6 +953,18 @@ void PrintWebViewHelper::OnPrintPages() {
   Print(frame, plugin, false);
 }
 
+void PrintWebViewHelper::OnPrintPagesWithSettings(base::string16 printer, PageRanges pages) {
+  if (ipc_nesting_level_> 1)
+    return;
+  blink::WebLocalFrame* frame;
+  if (!GetPrintFrame(&frame))
+    return;
+  // If we are printing a PDF extension frame, find the plugin node and print
+  // that instead.
+  auto plugin = delegate_->GetPdfElement(frame);
+  Print(frame, plugin, false, printer, pages);
+}
+
 void PrintWebViewHelper::OnPrintForSystemDialog() {
   if (ipc_nesting_level_> 1)
     return;
@@ -1345,8 +1358,16 @@ void PrintWebViewHelper::PrintNode(const blink::WebNode& node) {
 
 #if defined(ENABLE_BASIC_PRINTING)
 void PrintWebViewHelper::Print(blink::WebLocalFrame* frame,
+	const blink::WebNode& node,
+	bool is_scripted){
+	Print(frame, node, is_scripted, L"", printing::PageRanges());
+}
+
+void PrintWebViewHelper::Print(blink::WebLocalFrame* frame,
                                const blink::WebNode& node,
-                               bool is_scripted) {
+                               bool is_scripted,
+							   const base::string16& printer,
+							   const printing::PageRanges& pages) {
   // If still not finished with earlier print request simply ignore.
   if (prep_frame_view_)
     return;
@@ -1366,11 +1387,22 @@ void PrintWebViewHelper::Print(blink::WebLocalFrame* frame,
   }
 
   // Ask the browser to show UI to retrieve the final print settings.
-  if (delegate_->IsAskPrintSettingsEnabled() &&
-      !GetPrintSettingsFromUser(frame_ref.GetFrame(), node, expected_page_count,
-                                is_scripted)) {
-    DidFinishPrinting(OK);  // Release resources and fail silently.
-    return;
+  if (delegate_->IsAskPrintSettingsEnabled())
+  {
+	  if (printer.empty())
+	  {
+		  if (!GetPrintSettingsFromUser(frame_ref.GetFrame(), node, expected_page_count, is_scripted)) {
+			  DidFinishPrinting(OK);  // Release resources and fail silently.
+			  return;
+		  }
+	  }
+	  else
+	  {
+		  if (!GetPrintSettingsWithPrinterAndPages(frame_ref.GetFrame(), node, expected_page_count, is_scripted, printer, pages)) {
+			  DidFinishPrinting(OK);  // Release resources and fail silently.
+			  return;
+		  }
+	  }
   }
 
   // Render Pages for printing.
@@ -1685,6 +1717,47 @@ bool PrintWebViewHelper::GetPrintSettingsFromUser(blink::WebLocalFrame* frame,
   return (print_settings.params.dpi && print_settings.params.document_cookie);
 }
 
+bool PrintWebViewHelper::GetPrintSettingsWithPrinterAndPages(blink::WebLocalFrame* frame,
+	const blink::WebNode& node,
+	int expected_pages_count,
+	bool is_scripted,
+	const base::string16& printer_name,
+	const printing::PageRanges& pages) {
+
+	PrintHostMsg_ScriptedPrint_Params params;
+	PrintMsg_PrintPages_Params print_settings;
+
+	params.cookie = print_pages_params_->params.document_cookie;
+	params.has_selection = frame->hasSelection();
+	params.expected_pages_count = expected_pages_count;
+	MarginType margin_type = DEFAULT_MARGINS;
+	if (PrintingNodeOrPdfFrame(frame, node)) {
+		margin_type =
+			GetMarginsForPdf(frame, node, print_pages_params_->params);
+	}
+	params.margin_type = margin_type;
+	params.is_scripted = is_scripted;
+	params.forced_printer = printer_name;
+	params.pages = pages;
+
+	//Send(new PrintHostMsg_DidShowPrintDialog(routing_id()));
+
+	// PrintHostMsg_ScriptedPrint will reset print_scaling_option, so we save the
+	// value before and restore it afterwards.
+	blink::WebPrintScalingOption scaling_option =
+		print_pages_params_->params.print_scaling_option;
+
+	print_pages_params_.reset();
+	IPC::SyncMessage* msg =
+		new PrintHostMsg_ScriptedPrint(routing_id(), params, &print_settings);
+	msg->EnableMessagePumping();
+	Send(msg);
+
+	print_settings.params.print_scaling_option = scaling_option;
+	SetPrintPagesParams(print_settings);
+	return (print_settings.params.dpi && print_settings.params.document_cookie);
+}
+
 bool PrintWebViewHelper::RenderPagesForPrint(blink::WebLocalFrame* frame,
                                              const blink::WebNode& node) {
   if (!frame || prep_frame_view_)
diff --git components/printing/renderer/print_web_view_helper.h components/printing/renderer/print_web_view_helper.h
index 7aacfbc..7f00cb6 100644
--- components/printing/renderer/print_web_view_helper.h
+++ components/printing/renderer/print_web_view_helper.h
@@ -22,6 +22,7 @@
 #include "third_party/WebKit/public/web/WebNode.h"
 #include "third_party/WebKit/public/web/WebPrintParams.h"
 #include "ui/gfx/geometry/size.h"
+#include "printing/page_range.h"
 
 struct PrintMsg_Print_Params;
 struct PrintMsg_PrintPage_Params;
@@ -168,6 +169,7 @@ class PrintWebViewHelper
   // Message handlers ---------------------------------------------------------
 #if defined(ENABLE_BASIC_PRINTING)
   void OnPrintPages();
+  void OnPrintPagesWithSettings(base::string16 printer, printing::PageRanges pages);
   void OnPrintForSystemDialog();
   void OnPrintForPrintPreview(const base::DictionaryValue& job_settings);
 #endif  // defined(ENABLE_BASIC_PRINTING)
@@ -208,11 +210,18 @@ class PrintWebViewHelper
 
   // Main printing code -------------------------------------------------------
 
-#if defined(ENABLE_BASIC_PRINTING)
+#if defined(ENABLE_BASIC_PRINTING) 
   // |is_scripted| should be true when the call is coming from window.print()
   void Print(blink::WebLocalFrame* frame,
              const blink::WebNode& node,
              bool is_scripted);
+
+  // |is_scripted| should be true when the call is coming from window.print()
+  void Print(blink::WebLocalFrame* frame,
+             const blink::WebNode& node,
+             bool is_scripted,
+			 const base::string16& printer,
+			 const printing::PageRanges& pages);
 #endif  // defined(ENABLE_BASIC_PRINTING)
 
   // Notification when printing is done - signal tear-down/free resources.
@@ -247,6 +256,15 @@ class PrintWebViewHelper
                                 int expected_pages_count,
                                 bool is_scripted);
 
+  // Get final print settings with forced printer and pages to print.
+  // Return false if the user cancels or on error.
+  bool GetPrintSettingsWithPrinterAndPages(blink::WebLocalFrame* frame,
+                                const blink::WebNode& node,
+                                int expected_pages_count,
+                                bool is_scripted,
+							    const base::string16& printer_name,
+							    const printing::PageRanges& pages);
+
   // Page Printing / Rendering ------------------------------------------------
 
 #if defined(ENABLE_BASIC_PRINTING)
diff --git printing/printing_context.h printing/printing_context.h
index 609f019..f99d296 100644
--- printing/printing_context.h
+++ printing/printing_context.h
@@ -67,6 +67,9 @@ class PRINTING_EXPORT PrintingContext {
   // default device settings.
   virtual Result UseDefaultSettings() = 0;
 
+  // Selects the user's passed printer and default format.
+  virtual Result UseDefaultSettingsWithPrinterAndRanges(const base::string16& forced_printer, const PageRanges& ranges) = 0;
+
   // Updates the context with PDF printer settings.
   Result UsePdfSettings();
 
diff --git printing/printing_context_win.cc printing/printing_context_win.cc
index 4eff722..1317ad0 100644
--- printing/printing_context_win.cc
+++ printing/printing_context_win.cc
@@ -56,6 +56,40 @@ void PrintingContextWin::AskUserForSettings(
   NOTIMPLEMENTED();
 }
 
+PrintingContext::Result PrintingContextWin::UseDefaultSettingsWithPrinterAndRanges(const base::string16& forced_printer, const PageRanges& ranges) {
+	DCHECK(!in_print_job_);
+
+	if (!forced_printer.empty()) {
+		ScopedPrinterHandle printer;
+		if (printer.OpenPrinter(forced_printer.c_str())) {
+			scoped_ptr<DEVMODE, base::FreeDeleter> dev_mode =
+				CreateDevMode(printer.Get(), NULL);
+			if (InitializeSettings(forced_printer, dev_mode.get()) == OK)
+			{
+				if (ranges.size() > 0)
+				{
+					PageRanges ranges_vector;
+					ranges_vector.reserve(ranges.size());
+					// transform ranges from 1-based to 0-based
+					for (size_t i = 0; i < ranges.size(); ++i) {
+						PageRange range;
+						// Transfer from 1-based to 0-based.
+						range.from = ranges[i].from - 1;
+						range.to = ranges[i].to - 1;
+						ranges_vector.push_back(range);
+					}
+					settings_.set_ranges(ranges_vector);
+				}
+				return OK;
+			}
+		}
+	}
+
+	ReleaseContext();
+
+	return OnError();
+}
+
 PrintingContext::Result PrintingContextWin::UseDefaultSettings() {
   DCHECK(!in_print_job_);
 
diff --git printing/printing_context_win.h printing/printing_context_win.h
index 2d444cc..581bdcd 100644
--- printing/printing_context_win.h
+++ printing/printing_context_win.h
@@ -28,6 +28,7 @@ class PRINTING_EXPORT PrintingContextWin : public PrintingContext {
       bool is_scripted,
       const PrintSettingsCallback& callback) override;
   Result UseDefaultSettings() override;
+  Result UseDefaultSettingsWithPrinterAndRanges(const base::string16& forced_printer, const PageRanges& ranges) override;
   gfx::Size GetPdfPaperSizeDeviceUnits() override;
   Result UpdatePrinterSettings(bool external_preview,
                                bool show_system_dialog,
-- 

